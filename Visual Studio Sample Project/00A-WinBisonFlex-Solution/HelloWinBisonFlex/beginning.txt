#include <iostream>
#include <math.h>
// Kernel function to add the elements of two arrays
__global__
void add(int n, float *x, float *y)
{
  int index = blockIdx.x * blockDim.x + threadIdx.x;
  int stride = blockDim.x * gridDim.x;
  for (int i = index; i < n; i += stride)
    y[i] = x[i] + y[i];
}

__global__
void subtract(int n, float *x, float *y)
{
  int index = blockIdx.x * blockDim.x + threadIdx.x;
  int stride = blockDim.x * gridDim.x;
  for (int i = index; i < n; i += stride)
    y[i] = x[i] - y[i];
}

__global__
void multiply(int n, float *x, float *y)
{
  int index = blockIdx.x * blockDim.x + threadIdx.x;
  int stride = blockDim.x * gridDim.x;
  for (int i = index; i < n; i += stride)
    y[i] = x[i] * y[i];
}

__global__
void divide(int n, float *x, float *y)
{
  int index = blockIdx.x * blockDim.x + threadIdx.x;
  int stride = blockDim.x * gridDim.x;
  for (int i = index; i < n; i += stride)
    y[i] = x[i] / y[i];
}

void readData( string filePath, int maxNumbers, int* buffer ){
	FILE * pFile;
	int i = 0;
	fopen_s(&pFile,filePath.c_str(), "r");

	while ( i < maxNumbers )
	{
		int number;
		if (fscanf(pFile, "%d", &number) != 1)
			break;        // file finished or there was an error
		buffer[i] = number;
		i++;
	}
	fclose(pFile);
}

void writeData( string filePath, int maxNumbers, int* buffer ){
	FILE * pFile;
	int i = 0;
	fopen_s(&pFile,filePath.c_str(), "w");

	while ( i < maxNumbers )
	{
		fprintf(pFile, "%d ", buffer[i]);
		i++;
	}
	fclose(pFile);
}

int main(void)
{